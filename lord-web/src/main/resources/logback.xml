<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!--
	%m 输出代码中指定的消息
	%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
	%r 输出自应用启动到输出该log信息耗费的毫秒数
	%c 输出所属的类目，通常就是所在类的全名
	%t 输出产生该日志事件的线程名
	%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
	%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
	%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
	-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d |-%p %class:%line - %m%n</pattern><!-- 此处设置输出格式 -->
			<charset>GBK</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>
	<appender name="baselog"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>/data/lord-web-log.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>/data/lord-web/log.%d.%i</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 日志文件的最多存储64MB -->
				<maxFileSize>64 MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d |-%p %class:%line - %m%n</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<root level="info">
		<appender-ref ref="STDOUT" />
	</root>

	<logger name="com.lord" level="DEBUG">
		<appender-ref ref="baselog" />
	</logger>
</configuration>